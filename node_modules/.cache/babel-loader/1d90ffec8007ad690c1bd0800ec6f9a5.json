{"ast":null,"code":"import { getHeaderTitle, Header, HeaderBackButton, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport * as React from 'react';\nimport { Image, StyleSheet, View } from 'react-native';\nexport default function NativeStackView(_ref) {\n  let {\n    state,\n    descriptors\n  } = _ref;\n  return /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(View, {\n    style: styles.container\n  }, state.routes.map((route, i) => {\n    var _state$routes;\n\n    const isFocused = state.index === i;\n    const canGoBack = i !== 0;\n    const previousKey = (_state$routes = state.routes[i - 1]) === null || _state$routes === void 0 ? void 0 : _state$routes.key;\n    const previousDescriptor = previousKey ? descriptors[previousKey] : undefined;\n    const {\n      options,\n      navigation,\n      render\n    } = descriptors[route.key];\n    const {\n      header,\n      headerShown,\n      headerTintColor,\n      headerBackImageSource,\n      headerLeft,\n      headerRight,\n      headerTitle,\n      headerTitleAlign,\n      headerTitleStyle,\n      headerStyle,\n      headerShadowVisible,\n      headerTransparent,\n      contentStyle,\n      headerBackTitle\n    } = options;\n    return /*#__PURE__*/React.createElement(Screen, {\n      key: route.key,\n      focused: isFocused,\n      route: route,\n      navigation: navigation,\n      headerShown: headerShown,\n      headerTransparent: headerTransparent,\n      header: header !== undefined ? header({\n        back: previousDescriptor ? {\n          title: getHeaderTitle(previousDescriptor.options, previousDescriptor.route.name)\n        } : undefined,\n        options,\n        route,\n        navigation\n      }) : /*#__PURE__*/React.createElement(Header, {\n        title: getHeaderTitle(options, route.name),\n        headerTintColor: headerTintColor,\n        headerLeft: typeof headerLeft === 'function' ? _ref2 => {\n          let {\n            tintColor\n          } = _ref2;\n          return headerLeft({\n            tintColor,\n            canGoBack,\n            label: headerBackTitle\n          });\n        } : headerLeft === undefined && canGoBack ? _ref3 => {\n          let {\n            tintColor\n          } = _ref3;\n          return /*#__PURE__*/React.createElement(HeaderBackButton, {\n            tintColor: tintColor,\n            backImage: headerBackImageSource !== undefined ? () => /*#__PURE__*/React.createElement(Image, {\n              source: headerBackImageSource,\n              style: [styles.backImage, {\n                tintColor\n              }]\n            }) : undefined,\n            onPress: navigation.goBack,\n            canGoBack: canGoBack\n          });\n        } : headerLeft,\n        headerRight: typeof headerRight === 'function' ? _ref4 => {\n          let {\n            tintColor\n          } = _ref4;\n          return headerRight({\n            tintColor\n          });\n        } : headerRight,\n        headerTitle: typeof headerTitle === 'function' ? _ref5 => {\n          let {\n            children,\n            tintColor\n          } = _ref5;\n          return headerTitle({\n            children,\n            tintColor\n          });\n        } : headerTitle,\n        headerTitleAlign: headerTitleAlign,\n        headerTitleStyle: headerTitleStyle,\n        headerStyle: [headerTransparent ? {\n          position: 'absolute',\n          backgroundColor: 'transparent'\n        } : null, headerStyle, headerShadowVisible === false ? {\n          shadowOpacity: 0,\n          borderBottomWidth: 0\n        } : null]\n      }),\n      style: [StyleSheet.absoluteFill, {\n        display: isFocused ? 'flex' : 'none'\n      }]\n    }, /*#__PURE__*/React.createElement(View, {\n      style: [styles.contentContainer, contentStyle]\n    }, render()));\n  })));\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  contentContainer: {\n    flex: 1\n  },\n  backImage: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain'\n  }\n});","map":{"version":3,"sources":["NativeStackView.tsx"],"names":["descriptors","styles","container","isFocused","state","canGoBack","i","previousKey","previousDescriptor","render","route","headerBackTitle","header","back","title","getHeaderTitle","navigation","tintColor","headerLeft","label","headerRight","headerTitle","headerTransparent","position","backgroundColor","shadowOpacity","borderBottomWidth","StyleSheet","display","flex","contentContainer","backImage","height","width","margin","resizeMode"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  HeaderBackButton,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Image, StyleSheet, View } from 'react-native';\n\nimport type {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n} from '../types';\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  // This is used for the native implementation of the stack.\n  // eslint-disable-next-line react/no-unused-prop-types\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({ state, descriptors }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <View style={styles.container}>\n        {state.routes.map((route, i) => {\n          const isFocused = state.index === i;\n          const canGoBack = i !== 0;\n          const previousKey = state.routes[i - 1]?.key;\n          const previousDescriptor = previousKey\n            ? descriptors[previousKey]\n            : undefined;\n          const { options, navigation, render } = descriptors[route.key];\n\n          const {\n            header,\n            headerShown,\n            headerTintColor,\n            headerBackImageSource,\n            headerLeft,\n            headerRight,\n            headerTitle,\n            headerTitleAlign,\n            headerTitleStyle,\n            headerStyle,\n            headerShadowVisible,\n            headerTransparent,\n            contentStyle,\n            headerBackTitle,\n          } = options;\n\n          return (\n            <Screen\n              key={route.key}\n              focused={isFocused}\n              route={route}\n              navigation={navigation}\n              headerShown={headerShown}\n              headerTransparent={headerTransparent}\n              header={\n                header !== undefined ? (\n                  header({\n                    back: previousDescriptor\n                      ? {\n                          title: getHeaderTitle(\n                            previousDescriptor.options,\n                            previousDescriptor.route.name\n                          ),\n                        }\n                      : undefined,\n                    options,\n                    route,\n                    navigation,\n                  })\n                ) : (\n                  <Header\n                    title={getHeaderTitle(options, route.name)}\n                    headerTintColor={headerTintColor}\n                    headerLeft={\n                      typeof headerLeft === 'function'\n                        ? ({ tintColor }) =>\n                            headerLeft({\n                              tintColor,\n                              canGoBack,\n                              label: headerBackTitle,\n                            })\n                        : headerLeft === undefined && canGoBack\n                        ? ({ tintColor }) => (\n                            <HeaderBackButton\n                              tintColor={tintColor}\n                              backImage={\n                                headerBackImageSource !== undefined\n                                  ? () => (\n                                      <Image\n                                        source={headerBackImageSource}\n                                        style={[\n                                          styles.backImage,\n                                          { tintColor },\n                                        ]}\n                                      />\n                                    )\n                                  : undefined\n                              }\n                              onPress={navigation.goBack}\n                              canGoBack={canGoBack}\n                            />\n                          )\n                        : headerLeft\n                    }\n                    headerRight={\n                      typeof headerRight === 'function'\n                        ? ({ tintColor }) => headerRight({ tintColor })\n                        : headerRight\n                    }\n                    headerTitle={\n                      typeof headerTitle === 'function'\n                        ? ({ children, tintColor }) =>\n                            headerTitle({ children, tintColor })\n                        : headerTitle\n                    }\n                    headerTitleAlign={headerTitleAlign}\n                    headerTitleStyle={headerTitleStyle}\n                    headerStyle={[\n                      headerTransparent\n                        ? {\n                            position: 'absolute',\n                            backgroundColor: 'transparent',\n                          }\n                        : null,\n                      headerStyle,\n                      headerShadowVisible === false\n                        ? { shadowOpacity: 0, borderBottomWidth: 0 }\n                        : null,\n                    ]}\n                  />\n                )\n              }\n              style={[\n                StyleSheet.absoluteFill,\n                { display: isFocused ? 'flex' : 'none' },\n              ]}\n            >\n              <View style={[styles.contentContainer, contentStyle]}>\n                {render()}\n              </View>\n            </Screen>\n          );\n        })}\n      </View>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  contentContainer: {\n    flex: 1,\n  },\n  backImage: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}